import { bmtHashBytes } from '../../../src/account/utils'

describe('account/utils', () => {
  it('bmtHashBytes', () => {
    const examples = [
      {
        data: [49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10],
        result: [
          170, 48, 49, 176, 134, 45, 216, 23, 196, 248, 186, 72, 69, 149, 226, 11, 124, 53, 215, 107, 198, 193, 148, 1,
          139, 120, 165, 161, 151, 116, 30, 239,
        ],
      },
      {
        data: [
          49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44,
          49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50,
          44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49,
          49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50,
          50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49,
          49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10,
          50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50,
          10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49,
          44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50,
          50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49,
          49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50,
          50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49,
          49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49,
          10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44,
          50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49,
          49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50,
          50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49,
          49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50,
          50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10,
          49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44,
          49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50,
          44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49,
          49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50,
          50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49,
          49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10,
          50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50,
          10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49,
          44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50,
          50, 44, 50, 10, 49, 49, 49, 49, 49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10, 49, 49, 49, 49,
          49, 49, 49, 44, 49, 10, 50, 50, 50, 50, 50, 50, 44, 50, 10,
        ],
        result: [
          158, 211, 230, 177, 197, 2, 197, 228, 226, 174, 179, 63, 0, 64, 171, 139, 111, 194, 203, 43, 159, 122, 59,
          145, 126, 37, 165, 114, 218, 201, 105, 178,
        ],
      },
    ]
    for (const example of examples) {
      const result = bmtHashBytes(new Uint8Array(example.data))
      expect(result.length).toEqual(32)
      expect(result.toString().split(',').map(Number)).toEqual(example.result)
    }
  })
})
